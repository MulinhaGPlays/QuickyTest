{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nexport class VisualProofComponent {\n  toggleAccordion() {\n    this.gerando = !this.gerando;\n  }\n}\nVisualProofComponent.ɵfac = function VisualProofComponent_Factory(t) {\n  return new (t || VisualProofComponent)();\n};\nVisualProofComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: VisualProofComponent,\n  selectors: [[\"app-visual-proof\"]],\n  inputs: {\n    gerando: \"gerando\"\n  },\n  decls: 13,\n  vars: 4,\n  consts: [[1, \"accordion\"], [1, \"accordion-item\"], [1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"aria-expanded\", \"true\", 1, \"accordion-button\"], [1, \"accordion-collapse\", \"collapse\"], [1, \"accordion-body\"]],\n  template: function VisualProofComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\", 2)(3, \"button\", 3);\n      i0.ɵɵtext(4, \" Nenhuma prova foi gerada ainda. . . \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"strong\");\n      i0.ɵɵtext(8, \"This is the first item's accordion body.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(9, \" It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \");\n      i0.ɵɵelementStart(10, \"code\");\n      i0.ɵɵtext(11, \".accordion-body\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(12, \", though the transition does limit overflow. \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵclassMap(i0.ɵɵpureFunction1(2, _c0, ctx.gerando));\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;AAOA,OAAM,MAAOA,oBAAoB;EAG/BC,eAAe;IACb,IAAI,CAACC,OAAO,GAAG,CAAC,IAAI,CAACA,OAAO;EAC9B;;AALWF,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAG;EAAAC;IAAAF;EAAA;EAAAG;EAAAC;EAAAC;EAAAC;IAAA;MCPjCC,8BAAuB;MAIfA,qDACF;MAAAA,iBAAS;MAEXA,8BAAqE;MAEzDA,wDAAwC;MAAAA,iBAAS;MAACA,0XAAyW;MAAAA,6BAAM;MAAAA,gCAAe;MAAAA,iBAAO;MAAAA,8DACjc;MAAAA,iBAAM;;;MAHiCA,eAA2B;MAA3BA,sDAA2B","names":["VisualProofComponent","toggleAccordion","gerando","selectors","inputs","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Competidor\\Documents\\Github\\alpha-1.0.0f\\Angular\\angularproject\\Project\\ClientApp\\src\\app\\sub-components\\visual-proof\\visual-proof.component.ts","C:\\Users\\Competidor\\Documents\\Github\\alpha-1.0.0f\\Angular\\angularproject\\Project\\ClientApp\\src\\app\\sub-components\\visual-proof\\visual-proof.component.html"],"sourcesContent":["import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-visual-proof',\n  templateUrl: './visual-proof.component.html',\n  styleUrls: ['./visual-proof.component.css']\n})\nexport class VisualProofComponent {\n  @Input() gerando!: boolean;\n\n  toggleAccordion(): void {\n    this.gerando = !this.gerando;\r\n  }\n}\n","<div class=\"accordion\">\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\">\r\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" aria-expanded=\"true\">\r\n        Nenhuma prova foi gerada ainda. . .\r\n      </button>\r\n    </h2>\r\n    <div class=\"accordion-collapse collapse\" [class]=\"{'show': gerando}\">\r\n      <div class=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}